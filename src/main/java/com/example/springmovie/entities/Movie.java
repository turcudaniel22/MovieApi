package com.example.springmovie.entities;

// Import necessary JPA and validation annotations
import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.Getter;
import lombok.NoArgsConstructor;

import java.util.Set;

@Entity // Marks the class as a JPA entity that maps to a database table
@NoArgsConstructor // Lombok annotation to generate a no-argument constructor
@AllArgsConstructor // Lombok annotation to generate a constructor with all class fields as parameters
@Getter // Lombok annotation to generate getter methods for all fields
@Data // Lombok annotation to automatically generate getter, setter, equals, hashCode, and toString methods
public class Movie {

    @Id // Marks this field as the primary key of the entity
    @NotNull // Ensures that the movieId field cannot be null
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Specifies that the primary key value will be auto-generated by the database
    private Integer movieId; // Unique identifier for each movie

    @Column(nullable = false, length = 200) // Specifies the column properties (non-nullable and max length)
    @NotBlank(message = "Provide a title") // Validation to ensure the title field is not blank (not null, empty, or whitespace)
    private String title; // Title of the movie

    @Column(nullable = false, length = 200) // Specifies the genre column as non-nullable with max length
    @NotBlank(message = "Provide a genre") // Validation to ensure the genre is not blank
    private String genre; // Genre of the movie

    @Column(nullable = false, length = 200) // Specifies the director column as non-nullable with max length
    @NotBlank(message = "Provide a director") // Validation to ensure the director field is not blank
    private String director; // Director of the movie

    @NotNull(message = "Provide a release date") // Validation to ensure the releaseDate is not null
    private Integer releaseDate; // Release year of the movie

    @Column(nullable = false) // Specifies that the poster column is non-nullable
    @NotBlank(message = "Please provide the movie's poster!") // Validation to ensure the poster field is not blank
    private String poster; // Name or reference of the movie's poster image

    @ElementCollection // Specifies that this field will store a collection of elements
    @CollectionTable(name = "movie_cast") // Defines the table name for the collection of movie cast
    private Set<String> movieCast; // Set of cast members (actors or characters) in the movie
}
